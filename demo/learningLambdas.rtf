{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red191\green100\blue38;
\red32\green32\blue32;\red254\green187\blue91;\red153\green168\blue186;\red88\green118\blue71;\red86\green132\blue173;
\red133\green96\blue154;\red153\green168\blue186;\red133\green96\blue154;\red254\green187\blue91;\red86\green132\blue173;
\red88\green118\blue71;\red109\green109\blue109;}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c33725\c51765\c67843;
\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c33725\c51765\c67843;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c42745\c42745\c42745;}
\margl1440\margr1440\vieww19740\viewh10960\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 @Functional Interface\
public interface modifyCustomer\
\{\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \cb5 	public void updateCustomer(Connection conn, String customerInfo);\cf2 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 \}\
\
public void updateCustomer(Connection conn, \
\
\
public void \cf6 setCustomerName\cf7 (Connection conn\cf2 , \cf7 String customerName) \cf2 throws \cf7 SQLException \{\
\
    String updateCustomerName = \cf8 "UPDATE customer SET \'93 + \'93 = ? " \cf7 +\
            \cf8 "WHERE customerId = ?"\cf2 ;\
    \cf7 DBQuery.
\f1\i setPreparedStatement
\f0\i0 (conn\cf2 , \cf7 updateCustomerName)\cf2 ;\
    \cf7 PreparedStatement ps = DBQuery.
\f1\i getPreparedStatement
\f0\i0 ()\cf2 ;\
    \cf7 ps.setString(\cf9 1\cf2 , \cf7 customerName)\cf2 ;\
    \cf7 ps.setInt(\cf9 2\cf2 , \cf7 getCustomerId())\cf2 ;\
    \cf7 ps.execute()\cf2 ;\
\
    this\cf7 .\cf10 customerName \cf7 = customerName\cf2 ;\
\
\cf7 \}\
\
\cf2 public void \cf6 setAddress1\cf7 (Connection conn\cf2 , \cf7 String address1) \cf2 throws \cf7 SQLException \{\
    String updateCustomerAddress = \cf8 "UPDATE address SET address.address=? " \cf7 +\
            \cf8 "WHERE address.addressId=?"\cf2 ;\
    \cf7 DBQuery.
\f1\i setPreparedStatement
\f0\i0 (conn\cf2 , \cf7 updateCustomerAddress)\cf2 ;\
    \cf7 PreparedStatement ps = DBQuery.
\f1\i getPreparedStatement
\f0\i0 ()\cf2 ;\
    \cf7 ps.setString(\cf9 1\cf2 , \cf7 address1)\cf2 ;\
    \cf7 ps.setInt(\cf9 2\cf2 , \cf10 address\cf7 .getAddressId())\cf2 ;\
    \cf7 ps.execute()\cf2 ;\
\
    this\cf7 .\cf10 address\cf7 .setAddress1(address1)\cf2 ;\
    this\cf7 .\cf10 address1\cf7 =address1\cf2 ;\
\cf7 \}\
\
\cf2 public void \cf6 setPhone\cf7 (Connection conn\cf2 , \cf7 String phone) \cf2 throws \cf7 SQLException \{\
    String updateCustomerPhone = \cf8 "UPDATE address SET address.phone = ? " \cf7 +\
            \cf8 "WHERE address.addressId = ?"\cf2 ;\
    \cf7 DBQuery.
\f1\i setPreparedStatement
\f0\i0 (conn\cf2 , \cf7 updateCustomerPhone)\cf2 ;\
    \cf7 PreparedStatement ps = DBQuery.
\f1\i getPreparedStatement
\f0\i0 ()\cf2 ;\
    \cf7 ps.setString(\cf9 1\cf2 , \cf7 phone)\cf2 ;\
    \cf7 ps.setInt(\cf9 2\cf2 , \cf7 getAddressId())\cf2 ;\
    \cf7 ps.execute()\cf2 ;\
\
    this\cf7 .\cf10 address\cf7 .setPhone(phone)\cf2 ;\
    this\cf7 .\cf10 phone\cf7 =phone\cf2 ;\
\cf7 \}\
\
\
\
\
\
\
\
Generateappbymonth and by week\
\
public interface monthOrByWeek\
\{\
	boolean test(int year, int month, int week)\
\}\
\
\
MonthOrByWeek testByMonth(\cf11 \cb5 int year, \cf7 \cb3 int month, int week) ->\
\{\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf11 \cb5 	\cf4 int \cf11 currentMonth = LocalDate.
\f1\i now
\f0\i0 ().getMonthValue()\cf4 ;, \
	return(month == currentMonth && year == currentYear);\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb5 MonthOrByWeek testByMonth(int year, int month, int week) ->\
\{\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf11 \cb5 	Calendar currentCalendar = Calendar.
\f1\i getInstance
\f0\i0 ()\cf4 ;\
	int \cf11 currentWeek = currentCalendar.get(Calendar.
\f1\i \cf12 \cb5 WEEK_OF_YEAR
\f0\i0 \cf11 \cb5 )\cf4 ; \
	return(week == currentWeek && year == currentYear);\
\}\cf7 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 \cb5 public void \cf13 generateApp\cf11 (ObservableList<Appointment> appByMonthOrWeek, monthOrByWeek<> monthOrWeek) \{\cf4 \
\
    for\cf11 (\cf4 int \cf11 i=\cf14 0\cf4 ; \cf11 i<\cf12 appointmentList\cf11 .size()\cf4 ; \cf11 i++) \{\
		\cf4 int \cf11 month = \cf12 appointmentList\cf11 .get(i).getStart().toLocalDateTime().toLocalDate().getMonthValue()\cf4 ;\
		int \cf11 year = \cf12 appointmentList\cf11 .get(i).getStart().toLocalDateTime().toLocalDate().getYear()\cf4 ;\
		\cf11 Calendar appCalendar = Calendar.
\f1\i getInstance
\f0\i0 ()\cf4 ;\
		\cf11 Date date = \cf4 new \cf11 Date(\cf12 appointmentList\cf11 .get(i).getStart().getTime())\cf4 ;\
		\cf11 appCalendar.setTime(date)\cf4 ;\
		int \cf11 appWeek = appCalendar.get(Calendar.
\f1\i \cf12 \cb5 WEEK_OF_YEAR
\f0\i0 \cf11 \cb5 )\cf4 ;\
\
		if\cf11 (monthOrWeek.test(month, year, week)) \{\
			appByMonth.add(\cf12 appointmentList\cf11 .get(i))\cf4 ; \cf11 \}\
    \}\
\}\cf7 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 public void \cf6 generateAppByMonth\cf7 (ObservableList<Appointment> appByMonth) \{\
    \cf2 int \cf7 currentMonth = LocalDate.
\f1\i now
\f0\i0 ().getMonthValue()\cf2 ;, \
    int \cf7 currentYear = LocalDate.
\f1\i now
\f0\i0 ().getYear()\cf2 ;\
\
    for\cf7 (\cf2 int \cf7 i=\cf9 0\cf2 ; \cf7 i<\cf10 appointmentList\cf7 .size()\cf2 ; \cf7 i++) \{\
        \cf2 int \cf7 month = \cf10 appointmentList\cf7 .get(i).getStart().toLocalDateTime().toLocalDate().getMonthValue()\cf2 ;\
        int \cf7 year = \cf10 appointmentList\cf7 .get(i).getStart().toLocalDateTime().toLocalDate().getYear()\cf2 ;\
        if\cf7 (month == currentMonth && year == currentYear) \{\
            appByMonth.add(\cf10 appointmentList\cf7 .get(i))\cf2 ; \cf7 \}\
    \}\
\}\
\
\cf2 public void \cf6 generateAppByWeek\cf7 (ObservableList<Appointment> appByWeek)\
\{\
    Calendar currentCalendar = Calendar.
\f1\i getInstance
\f0\i0 ()\cf2 ;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2     int \cf7 currentWeek = currentCalendar.get(Calendar.
\f1\i \cf10 WEEK_OF_YEAR
\f0\i0 \cf7 )\cf2 ;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2     int \cf7 currentYear = currentCalendar.get(Calendar.
\f1\i \cf10 YEAR
\f0\i0 \cf7 )\cf2 ;\
    for\cf7 (\cf2 int \cf7 i=\cf9 0\cf2 ; \cf7 i<\cf10 appointmentList\cf7 .size()\cf2 ; \cf7 i++) \{\
        Calendar appCalendar = Calendar.
\f1\i getInstance
\f0\i0 ()\cf2 ;\
        \cf7 Date date = \cf2 new \cf7 Date(\cf10 appointmentList\cf7 .get(i).getStart().getTime())\cf2 ;\
        \cf7 appCalendar.setTime(date)\cf2 ;\
        int \cf7 appWeek = appCalendar.get(Calendar.
\f1\i \cf10 WEEK_OF_YEAR
\f0\i0 \cf7 )\cf2 ;\
        int \cf7 appYear = appCalendar.get(Calendar.
\f1\i \cf10 YEAR
\f0\i0 \cf7 )\cf2 ;\
        if\cf7 (currentWeek == appWeek && currentYear == appYear) \{\
            appByWeek.add(\cf10 appointmentList\cf7 .get(i))\cf2 ; \cf7 \}\
    \}\
\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 public interface \cf7 updateCustomerAddress\
\{\
    \cf2 void \cf6 update\cf7 (\cf2 Customer customer, String addressInfo\cf7 )\cf2 ;\
\cf7 \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf7 updateCustomerAddress \cf10 updateAddress \cf7 = (Customer customer\cf2 , \cf7 String address1) ->\
\{\
	customer.getAddress().setAddress1(address1);\
	customer.setAddress1(address1);\
\}\cf2 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf11 \cb5 updateCustomerAddress \cf12 updatePhone \cf11 = (Customer customer\cf4 , \cf11 String phone) ->\
\{\
	customer.getAddress().setPhone(phone);\
	customer.setPhone(phone);\cf4 \
\cf11 \}\cf4 ;\cf7 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
\
public void setAddressInfo(Connection conn, String addressInfo, boolean address, String addressInfo) throws SQL Exception\
\{\
	\cf11 \cb5 String updateCustomerAddress = \cf15 \cb5 "UPDATE address SET address.address=? " \cf11 \cb5 +\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11             \cf15 \cb5 "WHERE address.addressId=?"\cf4 \cb5 ;\
\cf11 \cb5 	String updateCustomerPhone = \cf15 \cb5 "UPDATE address SET address.phone = ? " \cf11 \cb5 +\
            \cf15 \cb5 "WHERE address.addressId = ?"\cf4 \cb5 ;\
\
	if(address) \{\cf11 \cb5 DBQuery.
\f1\i \cf11 \cb5 setPreparedStatement
\f0\i0 \cf11 \cb5 (conn\cf4 \cb5 , \cf11 \cb5 updateCustomerAddress)\}\cf4 \cb5 ;\
	else \{\cf11 \cb5 DBQuery.
\f1\i \cf11 \cb5 setPreparedStatement
\f0\i0 \cf11 \cb5 (conn\cf4 \cb5 , \cf11 \cb5 updateCustomerPhone)\cf4 \cb5 ;\}\
    \cf11 \cb5 PreparedStatement ps = DBQuery.
\f1\i \cf11 \cb5 getPreparedStatement
\f0\i0 \cf11 \cb5 ()\cf4 \cb5 ;\
    \cf11 \cb5 ps.setString(\cf14 \cb5 1\cf4 \cb5 , \cf11 \cb5 addressInfo)\cf4 \cb5 ;\
    \cf11 \cb5 ps.setInt(\cf14 \cb5 2\cf4 \cb5 , \cf12 \cb5 address\cf11 \cb5 .getAddressId())\cf4 \cb5 ;\
    \cf11 \cb5 ps.execute()\cf4 \cb5 ;\
\
    if(address) \{this\cf11 \cb5 .\cf12 \cb5 address\cf11 \cb5 .setAddress1(address1)\cf4 \cb5 ; this\cf11 \cb5 .\cf12 \cb5 address1\cf11 \cb5 =address1\cf4 \cb5 ;\}\
	else \{this\cf11 \cb5 .\cf12 \cb5 address\cf11 \cb5 .setPhone(phone)\cf4 \cb5 ; this\cf11 \cb5 .\cf12 \cb5 phone\cf11 \cb5 =phone\cf4 \cb5 ;\}\cf7 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \}\
\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \cb5 public void \cf13 \cb5 setAddress1\cf11 \cb5 (Connection conn\cf4 \cb5 , \cf11 \cb5 String address1) \cf4 \cb5 throws \cf11 \cb5 SQLException \{\
    String updateCustomerAddress = \cf15 \cb5 "UPDATE address SET address.address=? " \cf11 \cb5 +\
            \cf15 \cb5 "WHERE address.addressId=?"\cf4 \cb5 ;\
    \cf11 \cb5 DBQuery.
\f1\i \cf11 \cb5 setPreparedStatement
\f0\i0 \cf11 \cb5 (conn\cf4 \cb5 , \cf11 \cb5 updateCustomerAddress)\cf4 \cb5 ;\
    \cf11 \cb5 PreparedStatement ps = DBQuery.
\f1\i \cf11 \cb5 getPreparedStatement
\f0\i0 \cf11 \cb5 ()\cf4 \cb5 ;\
    \cf11 \cb5 ps.setString(\cf14 \cb5 1\cf4 \cb5 , \cf11 \cb5 address1)\cf4 \cb5 ;\
    \cf11 \cb5 ps.setInt(\cf14 \cb5 2\cf4 \cb5 , \cf12 \cb5 address\cf11 \cb5 .getAddressId())\cf4 \cb5 ;\
    \cf11 \cb5 ps.execute()\cf4 \cb5 ;\
\
    this\cf11 \cb5 .\cf12 \cb5 address\cf11 \cb5 .setAddress1(address1)\cf4 \cb5 ;\
    this\cf11 \cb5 .\cf12 \cb5 address1\cf11 \cb5 =address1\cf4 \cb5 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb5 \}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf4 \cb5 public void \cf13 \cb5 setPhone\cf11 \cb5 (Connection conn\cf4 \cb5 , \cf11 \cb5 String phone) \cf4 \cb5 throws \cf11 \cb5 SQLException \{\
    String updateCustomerPhone = \cf15 \cb5 "UPDATE address SET address.phone = ? " \cf11 \cb5 +\
            \cf15 \cb5 "WHERE address.addressId = ?"\cf4 \cb5 ;\
    \cf11 \cb5 DBQuery.
\f1\i \cf11 \cb5 setPreparedStatement
\f0\i0 \cf11 \cb5 (conn\cf4 \cb5 , \cf11 \cb5 updateCustomerPhone)\cf4 \cb5 ;\
    \cf11 \cb5 PreparedStatement ps = DBQuery.
\f1\i \cf11 \cb5 getPreparedStatement
\f0\i0 \cf11 \cb5 ()\cf4 \cb5 ;\
    \cf11 \cb5 ps.setString(\cf14 \cb5 1\cf4 \cb5 , \cf11 \cb5 phone)\cf4 \cb5 ;\
    \cf11 \cb5 ps.setInt(\cf14 \cb5 2\cf4 \cb5 , \cf11 \cb5 getAddressId())\cf4 \cb5 ;\
    \cf11 \cb5 ps.execute()\cf4 \cb5 ;\
\
    this\cf11 \cb5 .\cf12 \cb5 address\cf11 \cb5 .setPhone(phone)\cf4 \cb5 ;\
    this\cf11 \cb5 .\cf12 \cb5 phone\cf11 \cb5 =phone\cf4 \cb5 ;\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb5 \}\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
public boolean userAppointments(Connection conn, int userId, int appointmentId, LocalDateTime ss, LocalDateTime ee)\
\{\
	this.conn = conn;\
	Timestamp currentTime = \cf16 \cb3 Timestamp.valueOf(LocalDateTime.now());\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf11 \cb5 	String findAppointmentsString = \cf15 \cb5 "SELECT start, end FROM user u " \cf11 \cb5 +\
                \cf15 \cb5 "JOIN appointment a ON (u.userId=a.userId AND u.userId=?) WHERE appointmentId!=?"\cf4 \cb5 ;\
\
\cf16 \cb3 	\cf11 \cb5 String findAppointmentsString = \cf15 \cb5 "SELECT start FROM user u " \cf11 \cb5 +\
                \cf15 \cb5 "JOIN appointment a ON (u.userId=a.userId AND u.userId=?)"\cf4 \cb5 ;\
        \
	\cf11 DBQuery.
\f1\i setPreparedStatement
\f0\i0 (\cf12 conn\cf4 , \cf11 findAppointmentsString)\cf4 ;\
     \cf11 PreparedStatement ps = DBQuery.
\f1\i getPreparedStatement
\f0\i0 ()\cf4 ;\
     \cf11 ps.setInt(\cf14 1\cf4 , \cf11 userId)\cf4 ;\
     \cf11 ps.execute()\cf4 ;\
\cf16 \cb3 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb5 \
\}\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \cb3 public boolean \cf6 checkOverlappingTimes\cf7 (Connection conn\cf2 , int \cf7 appointmentId\cf2 , \cf7 LocalDateTime ss\cf2 , \cf7 LocalDateTime ee) \cf2 throws \cf7 SQLException \{\
        \cf2 this\cf7 .\cf10 conn \cf7 = conn\cf2 ;\
\
        \cf7 String findAppointmentsString = \cf8 "SELECT start, end FROM user u " \cf7 +\
                \cf8 "JOIN appointment a ON (u.userId=a.userId AND u.userId=?) WHERE appointmentId!=?"\cf2 ;\
        \cf7 DBQuery.
\f1\i setPreparedStatement
\f0\i0 (conn\cf2 , \cf7 findAppointmentsString)\cf2 ;\
        \cf7 PreparedStatement ps = DBQuery.
\f1\i getPreparedStatement
\f0\i0 ()\cf2 ;\
        \cf7 ps.setInt(\cf9 1\cf2 , \cf10 userId\cf7 )\cf2 ;\
        \cf7 ps.setInt(\cf9 2\cf2 , \cf7 appointmentId)\cf2 ;\
        \cf7 ps.execute()\cf2 ;\
\
        \cf7 ResultSet rs = ps.getResultSet()\cf2 ;\
        while\cf7 (rs.next())\
        \{\
            LocalDateTime s = rs.getTimestamp(\cf9 1\cf7 ).toLocalDateTime()\cf2 ;\
            \cf7 LocalDateTime e = rs.getTimestamp(\cf9 2\cf7 ).toLocalDateTime()\cf2 ;\
            \cf7 LocalDate date = s.toLocalDate()\cf2 ;\
\
            if\cf7 (date.isEqual(ss.toLocalDate()))\
            \{\
                \cf2 if\cf7 ((ss.isAfter(s) && ss.isBefore(e)) ||\
                        (ss.isBefore(s) && ee.isAfter(s)) ||\
                        ss.isEqual(s))\
                \{\
                    \cf2 return true;\
                \cf7 \}\
            \}\
        \}\
        \cf2 return false;\
    \cf7 \}\
\
    \cf2 public boolean \cf6 findAppointments\cf7 (\cf2 int \cf7 userId\cf2 , \cf7 Timestamp currentTime) \cf2 throws \cf7 SQLException \{\
        String findAppointmentsString = \cf8 "SELECT start FROM user u " \cf7 +\
                \cf8 "JOIN appointment a ON (u.userId=a.userId AND u.userId=?)"\cf2 ;\
        \cf7 DBQuery.
\f1\i setPreparedStatement
\f0\i0 (\cf10 conn\cf2 , \cf7 findAppointmentsString)\cf2 ;\
        \cf7 PreparedStatement ps = DBQuery.
\f1\i getPreparedStatement
\f0\i0 ()\cf2 ;\
        \cf7 ps.setInt(\cf9 1\cf2 , \cf7 userId)\cf2 ;\
        \cf7 ps.execute()\cf2 ;\
\
        \cf7 ResultSet rs = ps.getResultSet()\cf2 ;\
        while\cf7 (rs.next())\
        \{\
            LocalDateTime startTime = rs.getTimestamp(\cf9 1\cf7 ).toLocalDateTime()\cf2 ;\
\
            \cf7 LocalDateTime localTime = LocalDateTime.
\f1\i now
\f0\i0 ()\cf2 ;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf16 // used to test 15 min alert   //LocalDateTime localTime = LocalDateTime.of(2020, 8, 20, 12, 55);\
            \cf7 String nowTime = localTime.format(DateTimeFormatter.
\f1\i \cf10 ISO_LOCAL_DATE_TIME
\f0\i0 \cf7 )+\cf8 "Z"\cf2 ;\
            \cf7 String start = startTime.format(DateTimeFormatter.
\f1\i \cf10 ISO_LOCAL_DATE_TIME
\f0\i0 \cf7 )+\cf8 "Z"\cf2 ;\
            \cf7 Long difference = Duration.
\f1\i between
\f0\i0 (Instant.
\f1\i parse
\f0\i0 (nowTime)\cf2 , \cf7 Instant.
\f1\i parse
\f0\i0 (start)).getSeconds()\cf2 ;\
            return \cf7 (difference < \cf9 900 \cf7 && difference > \cf9 0\cf7 )\cf2 ;\
        \cf7 \}\
        \cf2 return false;\
    \cf7 \}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf11 \cb5 \
\
\cf7 \cb3 \
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
public interface UpdateAppCustomer\
\{\
	void setInfo(Appointment appointment, String customerInfo);\
\}\
\
\
UpdateAppCustomer updateCustomerName = (a, cInfo) -> a.setCustomerName(cInfo);\
UpdateAppCustomer updateCustomerAddress = (a, cInfo) -> a.setCustomerAddress(cInfo);\
UpdateAppCustomer updateCustomerPhone = (a, cInfo) -> a.setCustomerPhone(cInfo);\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 public void \cf6 updateAppointmentCustomerName\cf7 (\cf2 int \cf7 customerId\cf2 , \cf7 String customerInfo, updateAppCustomer update) \cf2 throws \cf7 SQLException \{\
    \cf2 for\cf7 (\cf2 int \cf7 i=\cf9 0\cf2 ; \cf7 i<\cf10 appointmentList\cf7 .size()\cf2 ; \cf7 i++)\
    \{\
        \cf2 int \cf7 cusId = \cf10 appointmentList\cf7 .get(i).getCustomerId()\cf2 ;\
        \
        if\cf7 (cusId==customerId)\
        \{ \
            \cf10 update(appointmentList.get(i), customerInfo); \cf2 \
        \cf7 \} \
    \}\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf7 \
}